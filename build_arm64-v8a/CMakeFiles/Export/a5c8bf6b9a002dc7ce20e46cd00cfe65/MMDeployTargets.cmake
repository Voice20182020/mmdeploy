# Generated by CMake

if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.8)
   message(FATAL_ERROR "CMake >= 2.8.0 required")
endif()
if(CMAKE_VERSION VERSION_LESS "2.8.3")
   message(FATAL_ERROR "CMake >= 2.8.3 required")
endif()
cmake_policy(PUSH)
cmake_policy(VERSION 2.8.3...3.24)
#----------------------------------------------------------------
# Generated CMake target import file.
#----------------------------------------------------------------

# Commands may need to know the format version.
set(CMAKE_IMPORT_FILE_VERSION 1)

# Protect against multiple inclusion, which would fail when already imported targets are added once more.
set(_cmake_targets_defined "")
set(_cmake_targets_not_defined "")
set(_cmake_expected_targets "")
foreach(_cmake_expected_target IN ITEMS mmdeploy_ncnn_ops_obj spdlog mmdeploy_core mmdeploy_execution mmdeploy_dlpack_utils mmdeploy_opencv_utils mmdeploy_cpu_device mmdeploy_graph mmdeploy_directory_model mmdeploy_operation mmdeploy_operation_cpu mmdeploy_operation_dummy mmdeploy_transform mmdeploy_transform_module mmdeploy_ncnn_net mmdeploy_net_module mmdeploy_mmcls mmdeploy_mmdet mmdeploy_mmseg mmdeploy_mmocr mmdeploy_mmocr_cpu_impl mmdeploy_mmedit mmdeploy_mmpose mmdeploy_mmrotate mmdeploy_mmaction mmdeploy_common_obj mmdeploy_common mmdeploy_model_obj mmdeploy_model mmdeploy_executor_obj mmdeploy_executor mmdeploy_pipeline_obj mmdeploy_pipeline mmdeploy_classifier_obj mmdeploy_classifier mmdeploy_detector_obj mmdeploy_detector mmdeploy_segmentor_obj mmdeploy_segmentor mmdeploy_text_detector_obj mmdeploy_text_detector mmdeploy_text_recognizer_obj mmdeploy_text_recognizer mmdeploy_restorer_obj mmdeploy_restorer mmdeploy_pose_detector_obj mmdeploy_pose_detector mmdeploy_pose_tracker_obj mmdeploy_pose_tracker mmdeploy_rotated_detector_obj mmdeploy_rotated_detector mmdeploy_video_recognizer_obj mmdeploy_video_recognizer mmdeploy mmdeploy_cxx_api MMDeployStaticModules MMDeployDynamicModules MMDeployLibs)
  list(APPEND _cmake_expected_targets "${_cmake_expected_target}")
  if(TARGET "${_cmake_expected_target}")
    list(APPEND _cmake_targets_defined "${_cmake_expected_target}")
  else()
    list(APPEND _cmake_targets_not_defined "${_cmake_expected_target}")
  endif()
endforeach()
unset(_cmake_expected_target)
if(_cmake_targets_defined STREQUAL _cmake_expected_targets)
  unset(_cmake_targets_defined)
  unset(_cmake_targets_not_defined)
  unset(_cmake_expected_targets)
  unset(CMAKE_IMPORT_FILE_VERSION)
  cmake_policy(POP)
  return()
endif()
if(NOT _cmake_targets_defined STREQUAL "")
  string(REPLACE ";" ", " _cmake_targets_defined_text "${_cmake_targets_defined}")
  string(REPLACE ";" ", " _cmake_targets_not_defined_text "${_cmake_targets_not_defined}")
  message(FATAL_ERROR "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_cmake_targets_defined_text}\nTargets not yet defined: ${_cmake_targets_not_defined_text}\n")
endif()
unset(_cmake_targets_defined)
unset(_cmake_targets_not_defined)
unset(_cmake_expected_targets)


# Compute the installation prefix relative to this file.
get_filename_component(_IMPORT_PREFIX "${CMAKE_CURRENT_LIST_FILE}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
if(_IMPORT_PREFIX STREQUAL "/")
  set(_IMPORT_PREFIX "")
endif()

# Create imported target mmdeploy_ncnn_ops_obj
add_library(mmdeploy_ncnn_ops_obj INTERFACE IMPORTED)

set_target_properties(mmdeploy_ncnn_ops_obj PROPERTIES
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:ncnn>"
)

# Create imported target spdlog
add_library(spdlog STATIC IMPORTED)

set_target_properties(spdlog PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "SPDLOG_COMPILED_LIB"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include;${_IMPORT_PREFIX}/include/mmdeploy/third_party"
  INTERFACE_LINK_LIBRARIES "Threads::Threads;log"
)

# Create imported target mmdeploy_core
add_library(mmdeploy_core STATIC IMPORTED)

set_target_properties(mmdeploy_core PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "MMDEPLOY_STATUS_USE_SOURCE_LOCATION=1"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include;${_IMPORT_PREFIX}/include/mmdeploy/third_party/outcome;${_IMPORT_PREFIX}/include/mmdeploy/third_party/json"
  INTERFACE_LINK_LIBRARIES "spdlog"
)

# Create imported target mmdeploy_execution
add_library(mmdeploy_execution STATIC IMPORTED)

set_target_properties(mmdeploy_execution PROPERTIES
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_core>"
)

# Create imported target mmdeploy_dlpack_utils
add_library(mmdeploy_dlpack_utils STATIC IMPORTED)

set_target_properties(mmdeploy_dlpack_utils PROPERTIES
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_core>"
)

# Create imported target mmdeploy_opencv_utils
add_library(mmdeploy_opencv_utils STATIC IMPORTED)

set_target_properties(mmdeploy_opencv_utils PROPERTIES
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_core>;opencv_calib3d;opencv_core;opencv_dnn;opencv_features2d;opencv_flann;opencv_gapi;opencv_highgui;opencv_imgcodecs;opencv_imgproc;opencv_ml;opencv_objdetect;opencv_photo;opencv_stitching;opencv_video;opencv_videoio"
)

# Create imported target mmdeploy_cpu_device
add_library(mmdeploy_cpu_device STATIC IMPORTED)

set_target_properties(mmdeploy_cpu_device PROPERTIES
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_core>;\$<LINK_ONLY:Threads::Threads>"
)

# Create imported target mmdeploy_graph
add_library(mmdeploy_graph STATIC IMPORTED)

set_target_properties(mmdeploy_graph PROPERTIES
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_core>"
)

# Create imported target mmdeploy_directory_model
add_library(mmdeploy_directory_model STATIC IMPORTED)

set_target_properties(mmdeploy_directory_model PROPERTIES
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_core>"
)

# Create imported target mmdeploy_operation
add_library(mmdeploy_operation STATIC IMPORTED)

set_target_properties(mmdeploy_operation PROPERTIES
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_core>"
)

# Create imported target mmdeploy_operation_cpu
add_library(mmdeploy_operation_cpu STATIC IMPORTED)

set_target_properties(mmdeploy_operation_cpu PROPERTIES
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_core>;\$<LINK_ONLY:mmdeploy_operation>;\$<LINK_ONLY:mmdeploy_opencv_utils>"
)

# Create imported target mmdeploy_operation_dummy
add_library(mmdeploy_operation_dummy STATIC IMPORTED)

set_target_properties(mmdeploy_operation_dummy PROPERTIES
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_core>;\$<LINK_ONLY:mmdeploy_operation>"
)

# Create imported target mmdeploy_transform
add_library(mmdeploy_transform STATIC IMPORTED)

set_target_properties(mmdeploy_transform PROPERTIES
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_core>;\$<LINK_ONLY:mmdeploy_operation>"
)

# Create imported target mmdeploy_transform_module
add_library(mmdeploy_transform_module STATIC IMPORTED)

set_target_properties(mmdeploy_transform_module PROPERTIES
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_core>;\$<LINK_ONLY:mmdeploy_transform>"
)

# Create imported target mmdeploy_ncnn_net
add_library(mmdeploy_ncnn_net STATIC IMPORTED)

set_target_properties(mmdeploy_ncnn_net PROPERTIES
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_core>;\$<LINK_ONLY:mmdeploy_ncnn_ops_obj>;\$<LINK_ONLY:ncnn>"
)

# Create imported target mmdeploy_net_module
add_library(mmdeploy_net_module STATIC IMPORTED)

set_target_properties(mmdeploy_net_module PROPERTIES
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_core>"
)

# Create imported target mmdeploy_mmcls
add_library(mmdeploy_mmcls STATIC IMPORTED)

set_target_properties(mmdeploy_mmcls PROPERTIES
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_core>;\$<LINK_ONLY:opencv_core>"
)

# Create imported target mmdeploy_mmdet
add_library(mmdeploy_mmdet STATIC IMPORTED)

set_target_properties(mmdeploy_mmdet PROPERTIES
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_core>;\$<LINK_ONLY:mmdeploy_opencv_utils>"
)

# Create imported target mmdeploy_mmseg
add_library(mmdeploy_mmseg STATIC IMPORTED)

set_target_properties(mmdeploy_mmseg PROPERTIES
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_core>;\$<LINK_ONLY:mmdeploy_opencv_utils>;\$<LINK_ONLY:mmdeploy_operation>"
)

# Create imported target mmdeploy_mmocr
add_library(mmdeploy_mmocr STATIC IMPORTED)

set_target_properties(mmdeploy_mmocr PROPERTIES
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_core>;\$<LINK_ONLY:mmdeploy_mmocr_cpu_impl>;\$<LINK_ONLY:mmdeploy_opencv_utils>;\$<LINK_ONLY:mmdeploy_operation>;\$<LINK_ONLY:mmdeploy_transform>;\$<LINK_ONLY:mmdeploy_core>"
)

# Create imported target mmdeploy_mmocr_cpu_impl
add_library(mmdeploy_mmocr_cpu_impl INTERFACE IMPORTED)

set_target_properties(mmdeploy_mmocr_cpu_impl PROPERTIES
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_opencv_utils>;\$<LINK_ONLY:mmdeploy_core>"
)

# Create imported target mmdeploy_mmedit
add_library(mmdeploy_mmedit STATIC IMPORTED)

set_target_properties(mmdeploy_mmedit PROPERTIES
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_core>;\$<LINK_ONLY:opencv_core>"
)

# Create imported target mmdeploy_mmpose
add_library(mmdeploy_mmpose STATIC IMPORTED)

set_target_properties(mmdeploy_mmpose PROPERTIES
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_core>;\$<LINK_ONLY:mmdeploy_transform>;\$<LINK_ONLY:mmdeploy_operation>;\$<LINK_ONLY:mmdeploy_opencv_utils>;\$<LINK_ONLY:opencv_calib3d>;\$<LINK_ONLY:opencv_core>;\$<LINK_ONLY:opencv_dnn>;\$<LINK_ONLY:opencv_features2d>;\$<LINK_ONLY:opencv_flann>;\$<LINK_ONLY:opencv_gapi>;\$<LINK_ONLY:opencv_highgui>;\$<LINK_ONLY:opencv_imgcodecs>;\$<LINK_ONLY:opencv_imgproc>;\$<LINK_ONLY:opencv_ml>;\$<LINK_ONLY:opencv_objdetect>;\$<LINK_ONLY:opencv_photo>;\$<LINK_ONLY:opencv_stitching>;\$<LINK_ONLY:opencv_video>;\$<LINK_ONLY:opencv_videoio>;\$<LINK_ONLY:opencv_calib3d>;\$<LINK_ONLY:opencv_core>;\$<LINK_ONLY:opencv_dnn>;\$<LINK_ONLY:opencv_features2d>;\$<LINK_ONLY:opencv_flann>;\$<LINK_ONLY:opencv_gapi>;\$<LINK_ONLY:opencv_highgui>;\$<LINK_ONLY:opencv_imgcodecs>;\$<LINK_ONLY:opencv_imgproc>;\$<LINK_ONLY:opencv_ml>;\$<LINK_ONLY:opencv_objdetect>;\$<LINK_ONLY:opencv_photo>;\$<LINK_ONLY:opencv_stitching>;\$<LINK_ONLY:opencv_video>;\$<LINK_ONLY:opencv_videoio>"
)

# Create imported target mmdeploy_mmrotate
add_library(mmdeploy_mmrotate STATIC IMPORTED)

set_target_properties(mmdeploy_mmrotate PROPERTIES
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_core>;\$<LINK_ONLY:mmdeploy_opencv_utils>"
)

# Create imported target mmdeploy_mmaction
add_library(mmdeploy_mmaction STATIC IMPORTED)

set_target_properties(mmdeploy_mmaction PROPERTIES
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_core>;\$<LINK_ONLY:mmdeploy_operation>;\$<LINK_ONLY:mmdeploy_transform>;\$<LINK_ONLY:mmdeploy_opencv_utils>"
)

# Create imported target mmdeploy_common_obj
add_library(mmdeploy_common_obj INTERFACE IMPORTED)

set_target_properties(mmdeploy_common_obj PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_core>"
)

# Create imported target mmdeploy_common
add_library(mmdeploy_common STATIC IMPORTED)

set_target_properties(mmdeploy_common PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_common_obj>"
)

# Create imported target mmdeploy_model_obj
add_library(mmdeploy_model_obj INTERFACE IMPORTED)

set_target_properties(mmdeploy_model_obj PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_core>"
)

# Create imported target mmdeploy_model
add_library(mmdeploy_model STATIC IMPORTED)

set_target_properties(mmdeploy_model PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_model_obj>"
)

# Create imported target mmdeploy_executor_obj
add_library(mmdeploy_executor_obj INTERFACE IMPORTED)

set_target_properties(mmdeploy_executor_obj PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_core>"
)

# Create imported target mmdeploy_executor
add_library(mmdeploy_executor STATIC IMPORTED)

set_target_properties(mmdeploy_executor PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_executor_obj>;mmdeploy_execution;mmdeploy_common"
)

# Create imported target mmdeploy_pipeline_obj
add_library(mmdeploy_pipeline_obj INTERFACE IMPORTED)

set_target_properties(mmdeploy_pipeline_obj PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_core>"
)

# Create imported target mmdeploy_pipeline
add_library(mmdeploy_pipeline STATIC IMPORTED)

set_target_properties(mmdeploy_pipeline PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_pipeline_obj>;mmdeploy_executor;mmdeploy_model;mmdeploy_common;mmdeploy_cxx_api"
)

# Create imported target mmdeploy_classifier_obj
add_library(mmdeploy_classifier_obj INTERFACE IMPORTED)

set_target_properties(mmdeploy_classifier_obj PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_core>"
)

# Create imported target mmdeploy_classifier
add_library(mmdeploy_classifier STATIC IMPORTED)

set_target_properties(mmdeploy_classifier PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_classifier_obj>;\$<LINK_ONLY:mmdeploy_pipeline>;mmdeploy_cxx_api"
)

# Create imported target mmdeploy_detector_obj
add_library(mmdeploy_detector_obj INTERFACE IMPORTED)

set_target_properties(mmdeploy_detector_obj PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_core>"
)

# Create imported target mmdeploy_detector
add_library(mmdeploy_detector STATIC IMPORTED)

set_target_properties(mmdeploy_detector PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_detector_obj>;\$<LINK_ONLY:mmdeploy_pipeline>;mmdeploy_cxx_api"
)

# Create imported target mmdeploy_segmentor_obj
add_library(mmdeploy_segmentor_obj INTERFACE IMPORTED)

set_target_properties(mmdeploy_segmentor_obj PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_core>"
)

# Create imported target mmdeploy_segmentor
add_library(mmdeploy_segmentor STATIC IMPORTED)

set_target_properties(mmdeploy_segmentor PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_segmentor_obj>;\$<LINK_ONLY:mmdeploy_pipeline>;mmdeploy_cxx_api"
)

# Create imported target mmdeploy_text_detector_obj
add_library(mmdeploy_text_detector_obj INTERFACE IMPORTED)

set_target_properties(mmdeploy_text_detector_obj PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_core>"
)

# Create imported target mmdeploy_text_detector
add_library(mmdeploy_text_detector STATIC IMPORTED)

set_target_properties(mmdeploy_text_detector PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_text_detector_obj>;\$<LINK_ONLY:mmdeploy_pipeline>;mmdeploy_cxx_api"
)

# Create imported target mmdeploy_text_recognizer_obj
add_library(mmdeploy_text_recognizer_obj INTERFACE IMPORTED)

set_target_properties(mmdeploy_text_recognizer_obj PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_core>"
)

# Create imported target mmdeploy_text_recognizer
add_library(mmdeploy_text_recognizer STATIC IMPORTED)

set_target_properties(mmdeploy_text_recognizer PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_text_recognizer_obj>;\$<LINK_ONLY:mmdeploy_pipeline>;mmdeploy_cxx_api"
)

# Create imported target mmdeploy_restorer_obj
add_library(mmdeploy_restorer_obj INTERFACE IMPORTED)

set_target_properties(mmdeploy_restorer_obj PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_core>"
)

# Create imported target mmdeploy_restorer
add_library(mmdeploy_restorer STATIC IMPORTED)

set_target_properties(mmdeploy_restorer PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_restorer_obj>;\$<LINK_ONLY:mmdeploy_pipeline>;mmdeploy_cxx_api"
)

# Create imported target mmdeploy_pose_detector_obj
add_library(mmdeploy_pose_detector_obj INTERFACE IMPORTED)

set_target_properties(mmdeploy_pose_detector_obj PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_core>"
)

# Create imported target mmdeploy_pose_detector
add_library(mmdeploy_pose_detector STATIC IMPORTED)

set_target_properties(mmdeploy_pose_detector PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_pose_detector_obj>;\$<LINK_ONLY:mmdeploy_pipeline>;mmdeploy_cxx_api"
)

# Create imported target mmdeploy_pose_tracker_obj
add_library(mmdeploy_pose_tracker_obj INTERFACE IMPORTED)

set_target_properties(mmdeploy_pose_tracker_obj PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_core>"
)

# Create imported target mmdeploy_pose_tracker
add_library(mmdeploy_pose_tracker STATIC IMPORTED)

set_target_properties(mmdeploy_pose_tracker PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_pose_tracker_obj>;\$<LINK_ONLY:mmdeploy_pipeline>;mmdeploy_cxx_api"
)

# Create imported target mmdeploy_rotated_detector_obj
add_library(mmdeploy_rotated_detector_obj INTERFACE IMPORTED)

set_target_properties(mmdeploy_rotated_detector_obj PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_core>"
)

# Create imported target mmdeploy_rotated_detector
add_library(mmdeploy_rotated_detector STATIC IMPORTED)

set_target_properties(mmdeploy_rotated_detector PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_rotated_detector_obj>;\$<LINK_ONLY:mmdeploy_pipeline>;mmdeploy_cxx_api"
)

# Create imported target mmdeploy_video_recognizer_obj
add_library(mmdeploy_video_recognizer_obj INTERFACE IMPORTED)

set_target_properties(mmdeploy_video_recognizer_obj PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_core>"
)

# Create imported target mmdeploy_video_recognizer
add_library(mmdeploy_video_recognizer STATIC IMPORTED)

set_target_properties(mmdeploy_video_recognizer PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_video_recognizer_obj>;\$<LINK_ONLY:mmdeploy_pipeline>;mmdeploy_cxx_api"
)

# Create imported target mmdeploy
add_library(mmdeploy SHARED IMPORTED)

set_target_properties(mmdeploy PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "mmdeploy_cxx_api"
)

# Create imported target mmdeploy_cxx_api
add_library(mmdeploy_cxx_api INTERFACE IMPORTED)

set_target_properties(mmdeploy_cxx_api PROPERTIES
  INTERFACE_COMPILE_FEATURES "cxx_std_17"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include;${_IMPORT_PREFIX}/include;${_IMPORT_PREFIX}/include/mmdeploy/third_party/outcome;${_IMPORT_PREFIX}/include/mmdeploy/third_party/json;${_IMPORT_PREFIX}/include/mmdeploy/third_party"
)

# Create imported target MMDeployStaticModules
add_library(MMDeployStaticModules INTERFACE IMPORTED)

set_target_properties(MMDeployStaticModules PROPERTIES
  INTERFACE_LINK_LIBRARIES "mmdeploy_execution;mmdeploy_cpu_device;mmdeploy_graph;mmdeploy_directory_model;mmdeploy_operation;mmdeploy_operation_cpu;mmdeploy_operation_dummy;mmdeploy_transform;mmdeploy_transform_module;mmdeploy_ncnn_net;mmdeploy_net_module;mmdeploy_mmcls;mmdeploy_mmdet;mmdeploy_mmseg;mmdeploy_mmocr;mmdeploy_mmedit;mmdeploy_mmpose;mmdeploy_mmrotate;mmdeploy_mmaction"
)

# Create imported target MMDeployDynamicModules
add_library(MMDeployDynamicModules INTERFACE IMPORTED)

# Create imported target MMDeployLibs
add_library(MMDeployLibs INTERFACE IMPORTED)

set_target_properties(MMDeployLibs PROPERTIES
  INTERFACE_LINK_LIBRARIES "mmdeploy_core;mmdeploy_dlpack_utils;mmdeploy_opencv_utils;mmdeploy_common;mmdeploy_model;mmdeploy_executor;mmdeploy_pipeline;mmdeploy_classifier;mmdeploy_detector;mmdeploy_segmentor;mmdeploy_text_detector;mmdeploy_text_recognizer;mmdeploy_restorer;mmdeploy_pose_detector;mmdeploy_pose_tracker;mmdeploy_rotated_detector;mmdeploy_video_recognizer"
)

if(CMAKE_VERSION VERSION_LESS 3.0.0)
  message(FATAL_ERROR "This file relies on consumers using CMake 3.0.0 or greater.")
endif()

# Load information for each installed configuration.
file(GLOB _cmake_config_files "${CMAKE_CURRENT_LIST_DIR}/MMDeployTargets-*.cmake")
foreach(_cmake_config_file IN LISTS _cmake_config_files)
  include("${_cmake_config_file}")
endforeach()
unset(_cmake_config_file)
unset(_cmake_config_files)

# Cleanup temporary variables.
set(_IMPORT_PREFIX)

# Loop over all imported files and verify that they actually exist
foreach(_cmake_target IN LISTS _cmake_import_check_targets)
  foreach(_cmake_file IN LISTS "_cmake_import_check_files_for_${_cmake_target}")
    if(NOT EXISTS "${_cmake_file}")
      message(FATAL_ERROR "The imported target \"${_cmake_target}\" references the file
   \"${_cmake_file}\"
but this file does not exist.  Possible reasons include:
* The file was deleted, renamed, or moved to another location.
* An install or uninstall procedure did not complete successfully.
* The installation package was faulty and contained
   \"${CMAKE_CURRENT_LIST_FILE}\"
but not all the files it references.
")
    endif()
  endforeach()
  unset(_cmake_file)
  unset("_cmake_import_check_files_for_${_cmake_target}")
endforeach()
unset(_cmake_target)
unset(_cmake_import_check_targets)

# This file does not depend on other imported targets which have
# been exported from the same project but in a separate export set.

# Commands beyond this point should not need to know the version.
set(CMAKE_IMPORT_FILE_VERSION)
cmake_policy(POP)
